//
const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource:///modules/CustomizableUI.jsm");
Cu.import("resource://gre/modules/XPCOMUtils.jsm");

// Disable Sync - start
XPCOMUtils.defineLazyServiceGetter(this, "uuid",
    "@mozilla.org/uuid-generator;1", "nsIUUIDGenerator");

const prefs = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);

function disableAbout(aClass, aClassName, aboutType) {
  var gAbout = {
    newChannel : function (aURI) {
      var url = "about:cliqz";
      var channel = Services.io.newChannel(url, null, null);
      channel.originalURI = aURI;
      return channel;
    },
    getURIFlags : function getURIFlags(aURI) {
      return Ci.nsIAboutModule.HIDE_FROM_ABOUTABOUT;
    },

    QueryInterface: XPCOMUtils.generateQI([Ci.nsIAboutModule]),

    createInstance: function(outer, iid) {
       return this.QueryInterface(iid);
    },
  };

  var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
  registrar.registerFactory(aClass, aClassName, "@mozilla.org/network/protocol/about;1?what=" + aboutType, gAbout);
  return gAbout;
}
var aboutFactories = [];
var aboutAccounts = {};
aboutAccounts.classID = Components.ID(uuid.generateUUID().toString());
aboutAccounts.factory = disableAbout(aboutAccounts.classID,
                                        "Disable about:accounts - CLIQZ",
                                        "accounts");
aboutFactories.push(aboutAccounts);
var aboutSyncLog = {};
aboutSyncLog.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncLog.factory = disableAbout(aboutSyncLog.classID,
                                        "Disable about:sync-log - CLIQZ",
                                        "sync-log");
aboutFactories.push(aboutSyncLog);
var aboutSyncProgress = {};
aboutSyncProgress.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncProgress.factory = disableAbout(aboutSyncProgress.classID,
                                        "Disable about:sync-progress - CLIQZ",
                                        "sync-progress");
aboutFactories.push(aboutSyncProgress);
var aboutSyncTabs = {};
aboutSyncTabs.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncTabs.factory = disableAbout(aboutSyncTabs.classID,
                                        "Disable about:sync-tabs - CLIQZ",
                                        "sync-tabs");
aboutFactories.push(aboutSyncTabs);
var aboutHome = {};
aboutHome.classID = Components.ID(uuid.generateUUID().toString());
aboutHome.factory = disableAbout(aboutHome.classID,
                                        "Disable about:home - CLIQZ",
                                        "home");
aboutFactories.push(aboutHome);
var aboutNewTab = {};
aboutNewTab.classID = Components.ID(uuid.generateUUID().toString());
aboutNewTab.factory = disableAbout(aboutNewTab.classID,
                                        "Disable about:newtab - CLIQZ",
                                        "newtab");
aboutFactories.push(aboutNewTab);
var aboutMozilla = {};
aboutMozilla.classID = Components.ID(uuid.generateUUID().toString());
aboutMozilla.factory = disableAbout(aboutMozilla.classID,
                                        "Disable about:mozilla - CLIQZ",
                                        "mozilla");
aboutFactories.push(aboutMozilla);
lockPref("browser.syncPromoViewsLeftMap", JSON.stringify({bookmarks:0, passwords:0, addons:0}));

function hide(element) {
  if (element) {
    element.setAttribute("hidden", "true");
  }
}

function E(id, context) {
  var element = context.getElementById(id);
  return element;
}

var observer = {
  observe: function observe(subject, topic, data) {
    switch (topic) {
      case "quit-application":
        var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
        for (var i=0; i < aboutFactories.length; i++)
          registrar.unregisterFactory(aboutFactories[i].classID, aboutFactories[i].factory);
        break;
    }
  }
};
Services.obs.addObserver(observer, "quit-application", false);
// Disable Sync - end

CustomizableUI.destroyWidget("pocket-button");
CustomizableUI.destroyWidget("web-apps-button");
CustomizableUI.destroyWidget("search-container");
CustomizableUI.destroyWidget("searchbar");

CustomizableUI.destroyWidget("loop-button");
lockPref("loop.enabled", false);

lockPref("browser.pocket.enabled", false);
lockPref("browser.selfsupport.url", "");

// Disable Mozilla's tracking protection
lockPref("privacy.trackingprotection.enabled", false);
lockPref("privacy.trackingprotection.pbmode.enabled", false);

// CLIQZ updates
pref("app.update.certs.1.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.1.commonName", "*.cliqz.com");
pref("app.update.certs.2.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.2.commonName", "*.cliqz.com");

pref("browser.uitour.enabled", false);

// Disable Safe Mode trigger on start
lockPref("toolkit.startup.max_resumed_crashes", -1);

// Disable Slow Startup message
lockPref("browser.slowStartup.notificationDisabled", true);

function writeFile(fileName, content, dir) {
  var profileDir = Services.dirsvc.get("ProfD", Ci.nsILocalFile);

  if(dir){
    profileDir.append(dir);
  }

  if( !profileDir.exists() || !profileDir.isDirectory() ) {
    profileDir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0777);
  }

  profileDir.append(fileName);

  var fos = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
  fos.init(profileDir, -1, -1, false);
  fos.write(content, content.length);
  fos.close();
}

try {
  prefs.getBoolPref("extensions.cliqz.listed");
} catch (e) {
  // setting default
  prefs.setBoolPref("extensions.cliqz.listed", false);
}

//resets  pluginreg.dat file to trigger a recheck for all the compatible plugins
var pluginResetPref = 'plugins.cliqzresetdone';
if(prefs.getPrefType(pluginResetPref) == 0){
  writeFile('pluginreg.dat','');
  prefs.setBoolPref(pluginResetPref, true);
}
