//
const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource:///modules/CustomizableUI.jsm");
Cu.import("resource://gre/modules/XPCOMUtils.jsm");

// Disable Sync - start
XPCOMUtils.defineLazyServiceGetter(this, "uuid",
    "@mozilla.org/uuid-generator;1", "nsIUUIDGenerator");

function hide(element) {
  if (element) {
    element.setAttribute("hidden", "true");
  }
}

function E(id, context) {
  var element = context.getElementById(id);
  return element;
}

function disableAbout(aClass, aClassName, aboutType) {
  var gAbout = {
    newChannel : function (aURI) {
      var url = "data:text/html," + gAboutXHTML;
      var channel = Services.io.newChannel(url, null, null);
      channel.originalURI = aURI;
      return channel;
    },
    getURIFlags : function getURIFlags(aURI) {
      return Ci.nsIAboutModule.HIDE_FROM_ABOUTABOUT;
    },

    QueryInterface: XPCOMUtils.generateQI([Ci.nsIAboutModule]),

    createInstance: function(outer, iid) {
       return this.QueryInterface(iid);
    },
  };

  var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
  registrar.registerFactory(aClass, aClassName, "@mozilla.org/network/protocol/about;1?what=" + aboutType, gAbout);
  return gAbout;
}
var aboutFactories = [];
var aboutAccounts = {};
aboutAccounts.classID = Components.ID(uuid.generateUUID().toString());
aboutAccounts.factory = disableAbout(aboutAccounts.classID,
                                        "Disable about:accounts - CCK",
                                        "accounts");
aboutFactories.push(aboutAccounts);
var aboutSyncLog = {};
aboutSyncLog.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncLog.factory = disableAbout(aboutSyncLog.classID,
                                        "Disable about:sync-log - CCK",
                                        "sync-log");
aboutFactories.push(aboutSyncLog);
var aboutSyncProgress = {};
aboutSyncProgress.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncProgress.factory = disableAbout(aboutSyncProgress.classID,
                                        "Disable about:sync-progress - CCK",
                                        "sync-progress");
aboutFactories.push(aboutSyncProgress);
var aboutSyncTabs = {};
aboutSyncTabs.classID = Components.ID(uuid.generateUUID().toString());
aboutSyncTabs.factory = disableAbout(aboutSyncTabs.classID,
                                        "Disable about:sync-tabs - CCK",
                                        "sync-tabs");
aboutFactories.push(aboutSyncTabs);
lockPref("browser.syncPromoViewsLeftMap", JSON.stringify({bookmarks:0, passwords:0, addons:0}));

function disableSync(doc) {
  var win = doc.defaultView;
  if (win.gSyncUI) {
    var mySyncUI = {
      init: function() {
        return;
      },
      initUI: function() {
        return;
      },
      updateUI: function() {
        hide(E("sync-setup-state", doc));
        hide(E("sync-syncnow-state", doc));
        hide(E("sync-setup", doc));
        hide(E("sync-syncnowitem", doc));
      }
    }
    win.gSyncUI = mySyncUI;
  }
  CustomizableUI.destroyWidget("sync-button");
  CustomizableUI.removeWidgetFromArea("sync-button");
  var toolbox = doc.getElementById("navigator-toolbox");
  if (toolbox && toolbox.palette) {
    element = toolbox.palette.querySelector("#sync-button");
    if (element) {
      element.parentNode.removeChild(element);
    }
  }
  hide(E("sync-setup-state", doc));
  hide(E("sync-syncnow-state", doc));
  hide(E("sync-setup", doc));
  hide(E("sync-syncnowitem", doc));
}

var observer = {
  observe: function observe(subject, topic, data) {
    switch (topic) {
      case "chrome-document-global-created":
        var win = subject.QueryInterface(Components.interfaces.nsIDOMWindow);
        win.addEventListener("load", function(event) {
          win.removeEventListener("load", arguments.callee, false);
          var doc = event.target;
          disableSync(doc)
        });
        break;
      case "quit-application":
        var registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
        for (var i=0; i < aboutFactories.length; i++)
          registrar.unregisterFactory(aboutFactories[i].classID, aboutFactories[i].factory);
        break;
    }
  }
};
Services.obs.addObserver(observer, "chrome-document-global-created", false);
Services.obs.addObserver(observer, "quit-application", false);
// Disable Sync - end

CustomizableUI.destroyWidget("pocket-button");

CustomizableUI.destroyWidget("loop-button");
lockPref("loop.enabled", false);

lockPref("browser.pocket.enabled", false);
lockPref("browser.selfsupport.url", "");

// CLIQZ updates - start

pref("app.update.certs.1.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.1.commonName", "*.cliqz.com");

pref("app.update.certs.2.issuerName", "CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US");
pref("app.update.certs.2.commonName", "*.cliqz.com");

// CLIQZ updates - end

lockPref("browser.newtab.url", "about:cliqz");
lockPref("browser.startup.page", 3);

function writeFile(fileName, content) {
  var profileDir = Services.dirsvc.get("ProfD", Ci.nsILocalFile);

  profileDir.append("chrome");

  if( !profileDir.exists() || !profileDir.isDirectory() ) {
    profileDir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0777);
  }

  profileDir.append(fileName);

  var fos = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
  fos.init(profileDir, -1, -1, false);
  fos.write(content, content.length);
  fos.close();
}

writeFile('userChrome.css', `
  @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
  @-moz-document url("chrome://browser/content/browser.xul") {
    #PanelUI-footer-fxa,
    #PanelUI-fxa-status {
      display: none !important;
    }

    #sync-setup, #menu_openApps {
      display: none !important;
    }
  }
`);

writeFile('userContent.css', `
  @-moz-document url-prefix(about:preferences) {
    #help-button {
      display: none !important;
    }
    #startupTable {
      display: none !important;
    }
    #category-sync {
      display: none !important;
    }
    #suggestionsInSearchFieldsCheckbox {
      display: none !important;
    }
    #FHRLearnMore, #crashReporterLearnMore {
      display: none !important;
    }
  }
`);
